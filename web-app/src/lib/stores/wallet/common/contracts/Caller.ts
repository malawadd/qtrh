/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type CallStruct = {
  target: PromiseOrValue<string>;
  data: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BigNumberish>;
};

export type CallStructOutput = [string, string, BigNumber] & {
  target: string;
  data: string;
  value: BigNumber;
};

export interface CallerInterface extends utils.Interface {
  functions: {
    "MAX_NONCE_INCREASE()": FunctionFragment;
    "allAuthorized(address)": FunctionFragment;
    "authorize(address)": FunctionFragment;
    "callAs(address,address,bytes)": FunctionFragment;
    "callBatched((address,bytes,uint256)[])": FunctionFragment;
    "callSigned(address,address,bytes,uint256,bytes32,bytes32)": FunctionFragment;
    "isAuthorized(address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "nonce(address)": FunctionFragment;
    "setNonce(uint256)": FunctionFragment;
    "unauthorize(address)": FunctionFragment;
    "unauthorizeAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_NONCE_INCREASE"
      | "allAuthorized"
      | "authorize"
      | "callAs"
      | "callBatched"
      | "callSigned"
      | "isAuthorized"
      | "isTrustedForwarder"
      | "nonce"
      | "setNonce"
      | "unauthorize"
      | "unauthorizeAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_NONCE_INCREASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allAuthorized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "callAs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callBatched",
    values: [CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callSigned",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonce",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unauthorize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unauthorizeAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_NONCE_INCREASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callAs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callBatched",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callSigned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorizeAll",
    data: BytesLike
  ): Result;

  events: {
    "Authorized(address,address)": EventFragment;
    "CalledAs(address,address)": EventFragment;
    "CalledSigned(address,uint256)": EventFragment;
    "NonceSet(address,uint256)": EventFragment;
    "Unauthorized(address,address)": EventFragment;
    "UnauthorizedAll(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CalledAs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CalledSigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unauthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnauthorizedAll"): EventFragment;
}

export interface AuthorizedEventObject {
  sender: string;
  authorized: string;
}
export type AuthorizedEvent = TypedEvent<
  [string, string],
  AuthorizedEventObject
>;

export type AuthorizedEventFilter = TypedEventFilter<AuthorizedEvent>;

export interface CalledAsEventObject {
  sender: string;
  authorized: string;
}
export type CalledAsEvent = TypedEvent<[string, string], CalledAsEventObject>;

export type CalledAsEventFilter = TypedEventFilter<CalledAsEvent>;

export interface CalledSignedEventObject {
  sender: string;
  nonce: BigNumber;
}
export type CalledSignedEvent = TypedEvent<
  [string, BigNumber],
  CalledSignedEventObject
>;

export type CalledSignedEventFilter = TypedEventFilter<CalledSignedEvent>;

export interface NonceSetEventObject {
  sender: string;
  newNonce: BigNumber;
}
export type NonceSetEvent = TypedEvent<
  [string, BigNumber],
  NonceSetEventObject
>;

export type NonceSetEventFilter = TypedEventFilter<NonceSetEvent>;

export interface UnauthorizedEventObject {
  sender: string;
  unauthorized: string;
}
export type UnauthorizedEvent = TypedEvent<
  [string, string],
  UnauthorizedEventObject
>;

export type UnauthorizedEventFilter = TypedEventFilter<UnauthorizedEvent>;

export interface UnauthorizedAllEventObject {
  sender: string;
}
export type UnauthorizedAllEvent = TypedEvent<
  [string],
  UnauthorizedAllEventObject
>;

export type UnauthorizedAllEventFilter = TypedEventFilter<UnauthorizedAllEvent>;

export interface Caller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CallerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_NONCE_INCREASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    allAuthorized(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { authorized: string[] }>;

    authorize(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callAs(
      sender: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callBatched(
      calls: CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callSigned(
      sender: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      sv: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAuthorized(
      sender: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { authorized: boolean }>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonce(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setNonce(
      newNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unauthorize(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unauthorizeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_NONCE_INCREASE(overrides?: CallOverrides): Promise<BigNumber>;

  allAuthorized(
    sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  authorize(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callAs(
    sender: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callBatched(
    calls: CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callSigned(
    sender: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    deadline: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    sv: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAuthorized(
    sender: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonce(
    sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setNonce(
    newNonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unauthorize(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unauthorizeAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_NONCE_INCREASE(overrides?: CallOverrides): Promise<BigNumber>;

    allAuthorized(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    authorize(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    callAs(
      sender: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    callBatched(
      calls: CallStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    callSigned(
      sender: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      sv: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isAuthorized(
      sender: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonce(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNonce(
      newNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unauthorize(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unauthorizeAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Authorized(address,address)"(
      sender?: PromiseOrValue<string> | null,
      authorized?: PromiseOrValue<string> | null
    ): AuthorizedEventFilter;
    Authorized(
      sender?: PromiseOrValue<string> | null,
      authorized?: PromiseOrValue<string> | null
    ): AuthorizedEventFilter;

    "CalledAs(address,address)"(
      sender?: PromiseOrValue<string> | null,
      authorized?: PromiseOrValue<string> | null
    ): CalledAsEventFilter;
    CalledAs(
      sender?: PromiseOrValue<string> | null,
      authorized?: PromiseOrValue<string> | null
    ): CalledAsEventFilter;

    "CalledSigned(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      nonce?: null
    ): CalledSignedEventFilter;
    CalledSigned(
      sender?: PromiseOrValue<string> | null,
      nonce?: null
    ): CalledSignedEventFilter;

    "NonceSet(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      newNonce?: null
    ): NonceSetEventFilter;
    NonceSet(
      sender?: PromiseOrValue<string> | null,
      newNonce?: null
    ): NonceSetEventFilter;

    "Unauthorized(address,address)"(
      sender?: PromiseOrValue<string> | null,
      unauthorized?: PromiseOrValue<string> | null
    ): UnauthorizedEventFilter;
    Unauthorized(
      sender?: PromiseOrValue<string> | null,
      unauthorized?: PromiseOrValue<string> | null
    ): UnauthorizedEventFilter;

    "UnauthorizedAll(address)"(
      sender?: PromiseOrValue<string> | null
    ): UnauthorizedAllEventFilter;
    UnauthorizedAll(
      sender?: PromiseOrValue<string> | null
    ): UnauthorizedAllEventFilter;
  };

  estimateGas: {
    MAX_NONCE_INCREASE(overrides?: CallOverrides): Promise<BigNumber>;

    allAuthorized(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorize(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callAs(
      sender: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callBatched(
      calls: CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callSigned(
      sender: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      sv: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAuthorized(
      sender: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNonce(
      newNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unauthorize(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unauthorizeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_NONCE_INCREASE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allAuthorized(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorize(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callAs(
      sender: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callBatched(
      calls: CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callSigned(
      sender: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      sv: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      sender: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNonce(
      newNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unauthorize(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unauthorizeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
