/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type KtrhsReceiverStruct = {
  userId: PromiseOrValue<BigNumberish>;
  config: PromiseOrValue<BigNumberish>;
};

export type KtrhsReceiverStructOutput = [BigNumber, BigNumber] & {
  userId: BigNumber;
  config: BigNumber;
};

export type UserMetadataStruct = {
  key: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BytesLike>;
};

export type UserMetadataStructOutput = [string, string] & {
  key: string;
  value: string;
};

export type SplitsReceiverStruct = {
  userId: PromiseOrValue<BigNumberish>;
  weight: PromiseOrValue<BigNumberish>;
};

export type SplitsReceiverStructOutput = [BigNumber, number] & {
  userId: BigNumber;
  weight: number;
};

export type KtrhsHistoryStruct = {
  ktrhsHash: PromiseOrValue<BytesLike>;
  receivers: KtrhsReceiverStruct[];
  updateTime: PromiseOrValue<BigNumberish>;
  maxEnd: PromiseOrValue<BigNumberish>;
};

export type KtrhsHistoryStructOutput = [
  string,
  KtrhsReceiverStructOutput[],
  number,
  number
] & {
  ktrhsHash: string;
  receivers: KtrhsReceiverStructOutput[];
  updateTime: number;
  maxEnd: number;
};

export interface KtrhsHubInterface extends utils.Interface {
  functions: {
    "AMT_PER_SEC_EXTRA_DECIMALS()": FunctionFragment;
    "AMT_PER_SEC_MULTIPLIER()": FunctionFragment;
    "DRIVER_ID_OFFSET()": FunctionFragment;
    "MAX_KTRHS_RECEIVERS()": FunctionFragment;
    "MAX_SPLITS_RECEIVERS()": FunctionFragment;
    "MAX_TOTAL_BALANCE()": FunctionFragment;
    "TOTAL_SPLITS_WEIGHT()": FunctionFragment;
    "acceptAdmin()": FunctionFragment;
    "admin()": FunctionFragment;
    "allPausers()": FunctionFragment;
    "balanceAt(uint256,address,(uint256,uint256)[],uint32)": FunctionFragment;
    "collect(uint256,address)": FunctionFragment;
    "collectable(uint256,address)": FunctionFragment;
    "cycleSecs()": FunctionFragment;
    "ktrhsState(uint256,address)": FunctionFragment;
    "driverAddress(uint32)": FunctionFragment;
    "emitUserMetadata(uint256,(bytes32,bytes)[])": FunctionFragment;
    "give(uint256,uint256,address,uint128)": FunctionFragment;
    "grantPauser(address)": FunctionFragment;
    "hashKtrhs((uint256,uint256)[])": FunctionFragment;
    "hashKtrhsHistory(bytes32,bytes32,uint32,uint32)": FunctionFragment;
    "hashSplits((uint256,uint32)[])": FunctionFragment;
    "implementation()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "minAmtPerSec()": FunctionFragment;
    "nextDriverId()": FunctionFragment;
    "pause()": FunctionFragment;
    "proposeNewAdmin(address)": FunctionFragment;
    "proposedAdmin()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "receivableKtrhsCycles(uint256,address)": FunctionFragment;
    "receiveKtrhs(uint256,address,uint32)": FunctionFragment;
    "receiveKtrhsResult(uint256,address,uint32)": FunctionFragment;
    "registerDriver(address)": FunctionFragment;
    "renounceAdmin()": FunctionFragment;
    "revokePauser(address)": FunctionFragment;
    "setKtrhs(uint256,address,(uint256,uint256)[],int128,(uint256,uint256)[],uint32,uint32)": FunctionFragment;
    "setSplits(uint256,(uint256,uint32)[])": FunctionFragment;
    "split(uint256,address,(uint256,uint32)[])": FunctionFragment;
    "splitResult(uint256,(uint256,uint32)[],uint128)": FunctionFragment;
    "splitsHash(uint256)": FunctionFragment;
    "splittable(uint256,address)": FunctionFragment;
    "squeezeKtrhs(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[])": FunctionFragment;
    "squeezeKtrhsResult(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[])": FunctionFragment;
    "totalBalance(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateDriverAddress(uint32,address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AMT_PER_SEC_EXTRA_DECIMALS"
      | "AMT_PER_SEC_MULTIPLIER"
      | "DRIVER_ID_OFFSET"
      | "MAX_KTRHS_RECEIVERS"
      | "MAX_SPLITS_RECEIVERS"
      | "MAX_TOTAL_BALANCE"
      | "TOTAL_SPLITS_WEIGHT"
      | "acceptAdmin"
      | "admin"
      | "allPausers"
      | "balanceAt"
      | "collect"
      | "collectable"
      | "cycleSecs"
      | "ktrhsState"
      | "driverAddress"
      | "emitUserMetadata"
      | "give"
      | "grantPauser"
      | "hashKtrhs"
      | "hashKtrhsHistory"
      | "hashSplits"
      | "implementation"
      | "isPaused"
      | "isPauser"
      | "minAmtPerSec"
      | "nextDriverId"
      | "pause"
      | "proposeNewAdmin"
      | "proposedAdmin"
      | "proxiableUUID"
      | "receivableKtrhsCycles"
      | "receiveKtrhs"
      | "receiveKtrhsResult"
      | "registerDriver"
      | "renounceAdmin"
      | "revokePauser"
      | "setKtrhs"
      | "setSplits"
      | "split"
      | "splitResult"
      | "splitsHash"
      | "splittable"
      | "squeezeKtrhs"
      | "squeezeKtrhsResult"
      | "totalBalance"
      | "unpause"
      | "updateDriverAddress"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AMT_PER_SEC_EXTRA_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AMT_PER_SEC_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DRIVER_ID_OFFSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_KTRHS_RECEIVERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SPLITS_RECEIVERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SPLITS_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allPausers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceAt",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      KtrhsReceiverStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "cycleSecs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ktrhsState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "driverAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitUserMetadata",
    values: [PromiseOrValue<BigNumberish>, UserMetadataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashKtrhs",
    values: [KtrhsReceiverStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hashKtrhsHistory",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashSplits",
    values: [SplitsReceiverStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minAmtPerSec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextDriverId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeNewAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivableKtrhsCycles",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveKtrhs",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveKtrhsResult",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDriver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokePauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKtrhs",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      KtrhsReceiverStruct[],
      PromiseOrValue<BigNumberish>,
      KtrhsReceiverStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSplits",
    values: [PromiseOrValue<BigNumberish>, SplitsReceiverStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      SplitsReceiverStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "splitResult",
    values: [
      PromiseOrValue<BigNumberish>,
      SplitsReceiverStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "splitsHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "splittable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "squeezeKtrhs",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      KtrhsHistoryStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "squeezeKtrhsResult",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      KtrhsHistoryStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDriverAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "AMT_PER_SEC_EXTRA_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AMT_PER_SEC_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DRIVER_ID_OFFSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_KTRHS_RECEIVERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SPLITS_RECEIVERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SPLITS_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allPausers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cycleSecs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ktrhsState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "driverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitUserMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashKtrhs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashKtrhsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashSplits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minAmtPerSec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextDriverId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivableKtrhsCycles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveKtrhs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveKtrhsResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDriver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKtrhs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSplits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitsHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "splittable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "squeezeKtrhs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "squeezeKtrhsResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDriverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Collectable(uint256,uint256,uint128)": EventFragment;
    "Collected(uint256,uint256,uint128)": EventFragment;
    "KtrhsReceiverSeen(bytes32,uint256,uint256)": EventFragment;
    "KtrhsSet(uint256,uint256,bytes32,bytes32,uint128,uint32)": EventFragment;
    "DriverAddressUpdated(uint32,address,address)": EventFragment;
    "DriverRegistered(uint32,address)": EventFragment;
    "Given(uint256,uint256,uint256,uint128)": EventFragment;
    "NewAdminProposed(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserGranted(address,address)": EventFragment;
    "PauserRevoked(address,address)": EventFragment;
    "ReceivedKtrhs(uint256,uint256,uint128,uint32)": EventFragment;
    "Split(uint256,uint256,uint256,uint128)": EventFragment;
    "SplitsReceiverSeen(bytes32,uint256,uint32)": EventFragment;
    "SplitsSet(uint256,bytes32)": EventFragment;
    "SqueezedKtrhs(uint256,uint256,uint256,uint128,bytes32[])": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "UserMetadataEmitted(uint256,bytes32,bytes)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collectable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KtrhsReceiverSeen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KtrhsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DriverAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DriverRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Given"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdminProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedKtrhs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Split"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SplitsReceiverSeen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SplitsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SqueezedKtrhs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserMetadataEmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface CollectableEventObject {
  userId: BigNumber;
  assetId: BigNumber;
  amt: BigNumber;
}
export type CollectableEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  CollectableEventObject
>;

export type CollectableEventFilter = TypedEventFilter<CollectableEvent>;

export interface CollectedEventObject {
  userId: BigNumber;
  assetId: BigNumber;
  collected: BigNumber;
}
export type CollectedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  CollectedEventObject
>;

export type CollectedEventFilter = TypedEventFilter<CollectedEvent>;

export interface KtrhsReceiverSeenEventObject {
  receiversHash: string;
  userId: BigNumber;
  config: BigNumber;
}
export type KtrhsReceiverSeenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  KtrhsReceiverSeenEventObject
>;

export type KtrhsReceiverSeenEventFilter =
  TypedEventFilter<KtrhsReceiverSeenEvent>;

export interface KtrhsSetEventObject {
  userId: BigNumber;
  assetId: BigNumber;
  receiversHash: string;
  ktrhsHistoryHash: string;
  balance: BigNumber;
  maxEnd: number;
}
export type KtrhsSetEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber, number],
  KtrhsSetEventObject
>;

export type KtrhsSetEventFilter = TypedEventFilter<KtrhsSetEvent>;

export interface DriverAddressUpdatedEventObject {
  driverId: number;
  oldDriverAddr: string;
  newDriverAddr: string;
}
export type DriverAddressUpdatedEvent = TypedEvent<
  [number, string, string],
  DriverAddressUpdatedEventObject
>;

export type DriverAddressUpdatedEventFilter =
  TypedEventFilter<DriverAddressUpdatedEvent>;

export interface DriverRegisteredEventObject {
  driverId: number;
  driverAddr: string;
}
export type DriverRegisteredEvent = TypedEvent<
  [number, string],
  DriverRegisteredEventObject
>;

export type DriverRegisteredEventFilter =
  TypedEventFilter<DriverRegisteredEvent>;

export interface GivenEventObject {
  userId: BigNumber;
  receiver: BigNumber;
  assetId: BigNumber;
  amt: BigNumber;
}
export type GivenEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  GivenEventObject
>;

export type GivenEventFilter = TypedEventFilter<GivenEvent>;

export interface NewAdminProposedEventObject {
  currentAdmin: string;
  newAdmin: string;
}
export type NewAdminProposedEvent = TypedEvent<
  [string, string],
  NewAdminProposedEventObject
>;

export type NewAdminProposedEventFilter =
  TypedEventFilter<NewAdminProposedEvent>;

export interface PausedEventObject {
  pauser: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PauserGrantedEventObject {
  pauser: string;
  admin: string;
}
export type PauserGrantedEvent = TypedEvent<
  [string, string],
  PauserGrantedEventObject
>;

export type PauserGrantedEventFilter = TypedEventFilter<PauserGrantedEvent>;

export interface PauserRevokedEventObject {
  pauser: string;
  admin: string;
}
export type PauserRevokedEvent = TypedEvent<
  [string, string],
  PauserRevokedEventObject
>;

export type PauserRevokedEventFilter = TypedEventFilter<PauserRevokedEvent>;

export interface ReceivedKtrhsEventObject {
  userId: BigNumber;
  assetId: BigNumber;
  amt: BigNumber;
  receivableCycles: number;
}
export type ReceivedKtrhsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number],
  ReceivedKtrhsEventObject
>;

export type ReceivedKtrhsEventFilter = TypedEventFilter<ReceivedKtrhsEvent>;

export interface SplitEventObject {
  userId: BigNumber;
  receiver: BigNumber;
  assetId: BigNumber;
  amt: BigNumber;
}
export type SplitEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  SplitEventObject
>;

export type SplitEventFilter = TypedEventFilter<SplitEvent>;

export interface SplitsReceiverSeenEventObject {
  receiversHash: string;
  userId: BigNumber;
  weight: number;
}
export type SplitsReceiverSeenEvent = TypedEvent<
  [string, BigNumber, number],
  SplitsReceiverSeenEventObject
>;

export type SplitsReceiverSeenEventFilter =
  TypedEventFilter<SplitsReceiverSeenEvent>;

export interface SplitsSetEventObject {
  userId: BigNumber;
  receiversHash: string;
}
export type SplitsSetEvent = TypedEvent<
  [BigNumber, string],
  SplitsSetEventObject
>;

export type SplitsSetEventFilter = TypedEventFilter<SplitsSetEvent>;

export interface SqueezedKtrhsEventObject {
  userId: BigNumber;
  assetId: BigNumber;
  senderId: BigNumber;
  amt: BigNumber;
  ktrhsHistoryHashes: string[];
}
export type SqueezedKtrhsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string[]],
  SqueezedKtrhsEventObject
>;

export type SqueezedKtrhsEventFilter = TypedEventFilter<SqueezedKtrhsEvent>;

export interface UnpausedEventObject {
  pauser: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface UserMetadataEmittedEventObject {
  userId: BigNumber;
  key: string;
  value: string;
}
export type UserMetadataEmittedEvent = TypedEvent<
  [BigNumber, string, string],
  UserMetadataEmittedEventObject
>;

export type UserMetadataEmittedEventFilter =
  TypedEventFilter<UserMetadataEmittedEvent>;

export interface WithdrawnEventObject {
  erc20: string;
  receiver: string;
  amt: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface KtrhsHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KtrhsHubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AMT_PER_SEC_EXTRA_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    AMT_PER_SEC_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    DRIVER_ID_OFFSET(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_KTRHS_RECEIVERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_SPLITS_RECEIVERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TOTAL_BALANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_SPLITS_WEIGHT(overrides?: CallOverrides): Promise<[number]>;

    acceptAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allPausers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { pausersList: string[] }>;

    balanceAt(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: KtrhsReceiverStruct[],
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    collect(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectable(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amt: BigNumber }>;

    cycleSecs(overrides?: CallOverrides): Promise<[number]>;

    ktrhsState(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, number] & {
        ktrhsHash: string;
        ktrhsHistoryHash: string;
        updateTime: number;
        balance: BigNumber;
        maxEnd: number;
      }
    >;

    driverAddress(
      driverId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { driverAddr: string }>;

    emitUserMetadata(
      userId: PromiseOrValue<BigNumberish>,
      userMetadata: UserMetadataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    give(
      userId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantPauser(
      pauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hashKtrhs(
      receivers: KtrhsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<[string] & { ktrhsHash: string }>;

    hashKtrhsHistory(
      oldKtrhsHistoryHash: PromiseOrValue<BytesLike>,
      ktrhsHash: PromiseOrValue<BytesLike>,
      updateTime: PromiseOrValue<BigNumberish>,
      maxEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { ktrhsHistoryHash: string }>;

    hashSplits(
      receivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<[string] & { receiversHash: string }>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isPauser(
      pauser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isAddrPauser: boolean }>;

    minAmtPerSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextDriverId(
      overrides?: CallOverrides
    ): Promise<[number] & { driverId: number }>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposedAdmin(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    receivableKtrhsCycles(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { cycles: number }>;

    receiveKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      maxCycles: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveKtrhsResult(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      maxCycles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { receivableAmt: BigNumber }>;

    registerDriver(
      driverAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePauser(
      pauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: KtrhsReceiverStruct[],
      balanceDelta: PromiseOrValue<BigNumberish>,
      newReceivers: KtrhsReceiverStruct[],
      maxEndHint1: PromiseOrValue<BigNumberish>,
      maxEndHint2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSplits(
      userId: PromiseOrValue<BigNumberish>,
      receivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    split(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitResult(
      userId: PromiseOrValue<BigNumberish>,
      currReceivers: SplitsReceiverStruct[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collectableAmt: BigNumber;
        splitAmt: BigNumber;
      }
    >;

    splitsHash(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { currSplitsHash: string }>;

    splittable(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amt: BigNumber }>;

    squeezeKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      senderId: PromiseOrValue<BigNumberish>,
      historyHash: PromiseOrValue<BytesLike>,
      ktrhsHistory: KtrhsHistoryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    squeezeKtrhsResult(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      senderId: PromiseOrValue<BigNumberish>,
      historyHash: PromiseOrValue<BytesLike>,
      ktrhsHistory: KtrhsHistoryStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amt: BigNumber }>;

    totalBalance(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDriverAddress(
      driverId: PromiseOrValue<BigNumberish>,
      newDriverAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      erc20: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AMT_PER_SEC_EXTRA_DECIMALS(overrides?: CallOverrides): Promise<number>;

  AMT_PER_SEC_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  DRIVER_ID_OFFSET(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_KTRHS_RECEIVERS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SPLITS_RECEIVERS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOTAL_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_SPLITS_WEIGHT(overrides?: CallOverrides): Promise<number>;

  acceptAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allPausers(overrides?: CallOverrides): Promise<string[]>;

  balanceAt(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    currReceivers: KtrhsReceiverStruct[],
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collect(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectable(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cycleSecs(overrides?: CallOverrides): Promise<number>;

  ktrhsState(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, BigNumber, number] & {
      ktrhsHash: string;
      ktrhsHistoryHash: string;
      updateTime: number;
      balance: BigNumber;
      maxEnd: number;
    }
  >;

  driverAddress(
    driverId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  emitUserMetadata(
    userId: PromiseOrValue<BigNumberish>,
    userMetadata: UserMetadataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  give(
    userId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantPauser(
    pauser: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hashKtrhs(
    receivers: KtrhsReceiverStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  hashKtrhsHistory(
    oldKtrhsHistoryHash: PromiseOrValue<BytesLike>,
    ktrhsHash: PromiseOrValue<BytesLike>,
    updateTime: PromiseOrValue<BigNumberish>,
    maxEnd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  hashSplits(
    receivers: SplitsReceiverStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  isPauser(
    pauser: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minAmtPerSec(overrides?: CallOverrides): Promise<BigNumber>;

  nextDriverId(overrides?: CallOverrides): Promise<number>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposedAdmin(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  receivableKtrhsCycles(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  receiveKtrhs(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    maxCycles: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveKtrhsResult(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    maxCycles: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerDriver(
    driverAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePauser(
    pauser: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKtrhs(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    currReceivers: KtrhsReceiverStruct[],
    balanceDelta: PromiseOrValue<BigNumberish>,
    newReceivers: KtrhsReceiverStruct[],
    maxEndHint1: PromiseOrValue<BigNumberish>,
    maxEndHint2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSplits(
    userId: PromiseOrValue<BigNumberish>,
    receivers: SplitsReceiverStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  split(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    currReceivers: SplitsReceiverStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitResult(
    userId: PromiseOrValue<BigNumberish>,
    currReceivers: SplitsReceiverStruct[],
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { collectableAmt: BigNumber; splitAmt: BigNumber }
  >;

  splitsHash(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  splittable(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  squeezeKtrhs(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    senderId: PromiseOrValue<BigNumberish>,
    historyHash: PromiseOrValue<BytesLike>,
    ktrhsHistory: KtrhsHistoryStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  squeezeKtrhsResult(
    userId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    senderId: PromiseOrValue<BigNumberish>,
    historyHash: PromiseOrValue<BytesLike>,
    ktrhsHistory: KtrhsHistoryStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalBalance(
    erc20: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDriverAddress(
    driverId: PromiseOrValue<BigNumberish>,
    newDriverAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    erc20: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AMT_PER_SEC_EXTRA_DECIMALS(overrides?: CallOverrides): Promise<number>;

    AMT_PER_SEC_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    DRIVER_ID_OFFSET(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_KTRHS_RECEIVERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SPLITS_RECEIVERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SPLITS_WEIGHT(overrides?: CallOverrides): Promise<number>;

    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allPausers(overrides?: CallOverrides): Promise<string[]>;

    balanceAt(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: KtrhsReceiverStruct[],
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectable(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycleSecs(overrides?: CallOverrides): Promise<number>;

    ktrhsState(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, number] & {
        ktrhsHash: string;
        ktrhsHistoryHash: string;
        updateTime: number;
        balance: BigNumber;
        maxEnd: number;
      }
    >;

    driverAddress(
      driverId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    emitUserMetadata(
      userId: PromiseOrValue<BigNumberish>,
      userMetadata: UserMetadataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    give(
      userId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantPauser(
      pauser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hashKtrhs(
      receivers: KtrhsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    hashKtrhsHistory(
      oldKtrhsHistoryHash: PromiseOrValue<BytesLike>,
      ktrhsHash: PromiseOrValue<BytesLike>,
      updateTime: PromiseOrValue<BigNumberish>,
      maxEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    hashSplits(
      receivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    isPauser(
      pauser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minAmtPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    nextDriverId(overrides?: CallOverrides): Promise<number>;

    pause(overrides?: CallOverrides): Promise<void>;

    proposeNewAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedAdmin(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    receivableKtrhsCycles(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    receiveKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      maxCycles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveKtrhsResult(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      maxCycles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDriver(
      driverAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    renounceAdmin(overrides?: CallOverrides): Promise<void>;

    revokePauser(
      pauser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: KtrhsReceiverStruct[],
      balanceDelta: PromiseOrValue<BigNumberish>,
      newReceivers: KtrhsReceiverStruct[],
      maxEndHint1: PromiseOrValue<BigNumberish>,
      maxEndHint2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSplits(
      userId: PromiseOrValue<BigNumberish>,
      receivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    split(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collectableAmt: BigNumber;
        splitAmt: BigNumber;
      }
    >;

    splitResult(
      userId: PromiseOrValue<BigNumberish>,
      currReceivers: SplitsReceiverStruct[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collectableAmt: BigNumber;
        splitAmt: BigNumber;
      }
    >;

    splitsHash(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    splittable(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    squeezeKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      senderId: PromiseOrValue<BigNumberish>,
      historyHash: PromiseOrValue<BytesLike>,
      ktrhsHistory: KtrhsHistoryStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    squeezeKtrhsResult(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      senderId: PromiseOrValue<BigNumberish>,
      historyHash: PromiseOrValue<BytesLike>,
      ktrhsHistory: KtrhsHistoryStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBalance(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateDriverAddress(
      driverId: PromiseOrValue<BigNumberish>,
      newDriverAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      erc20: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Collectable(uint256,uint256,uint128)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      amt?: null
    ): CollectableEventFilter;
    Collectable(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      amt?: null
    ): CollectableEventFilter;

    "Collected(uint256,uint256,uint128)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      collected?: null
    ): CollectedEventFilter;
    Collected(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      collected?: null
    ): CollectedEventFilter;

    "KtrhsReceiverSeen(bytes32,uint256,uint256)"(
      receiversHash?: PromiseOrValue<BytesLike> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      config?: null
    ): KtrhsReceiverSeenEventFilter;
    KtrhsReceiverSeen(
      receiversHash?: PromiseOrValue<BytesLike> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      config?: null
    ): KtrhsReceiverSeenEventFilter;

    "KtrhsSet(uint256,uint256,bytes32,bytes32,uint128,uint32)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      receiversHash?: PromiseOrValue<BytesLike> | null,
      ktrhsHistoryHash?: null,
      balance?: null,
      maxEnd?: null
    ): KtrhsSetEventFilter;
    KtrhsSet(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      receiversHash?: PromiseOrValue<BytesLike> | null,
      ktrhsHistoryHash?: null,
      balance?: null,
      maxEnd?: null
    ): KtrhsSetEventFilter;

    "DriverAddressUpdated(uint32,address,address)"(
      driverId?: PromiseOrValue<BigNumberish> | null,
      oldDriverAddr?: PromiseOrValue<string> | null,
      newDriverAddr?: PromiseOrValue<string> | null
    ): DriverAddressUpdatedEventFilter;
    DriverAddressUpdated(
      driverId?: PromiseOrValue<BigNumberish> | null,
      oldDriverAddr?: PromiseOrValue<string> | null,
      newDriverAddr?: PromiseOrValue<string> | null
    ): DriverAddressUpdatedEventFilter;

    "DriverRegistered(uint32,address)"(
      driverId?: PromiseOrValue<BigNumberish> | null,
      driverAddr?: PromiseOrValue<string> | null
    ): DriverRegisteredEventFilter;
    DriverRegistered(
      driverId?: PromiseOrValue<BigNumberish> | null,
      driverAddr?: PromiseOrValue<string> | null
    ): DriverRegisteredEventFilter;

    "Given(uint256,uint256,uint256,uint128)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      receiver?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      amt?: null
    ): GivenEventFilter;
    Given(
      userId?: PromiseOrValue<BigNumberish> | null,
      receiver?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      amt?: null
    ): GivenEventFilter;

    "NewAdminProposed(address,address)"(
      currentAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null
    ): NewAdminProposedEventFilter;
    NewAdminProposed(
      currentAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null
    ): NewAdminProposedEventFilter;

    "Paused(address)"(
      pauser?: PromiseOrValue<string> | null
    ): PausedEventFilter;
    Paused(pauser?: PromiseOrValue<string> | null): PausedEventFilter;

    "PauserGranted(address,address)"(
      pauser?: PromiseOrValue<string> | null,
      admin?: PromiseOrValue<string> | null
    ): PauserGrantedEventFilter;
    PauserGranted(
      pauser?: PromiseOrValue<string> | null,
      admin?: PromiseOrValue<string> | null
    ): PauserGrantedEventFilter;

    "PauserRevoked(address,address)"(
      pauser?: PromiseOrValue<string> | null,
      admin?: PromiseOrValue<string> | null
    ): PauserRevokedEventFilter;
    PauserRevoked(
      pauser?: PromiseOrValue<string> | null,
      admin?: PromiseOrValue<string> | null
    ): PauserRevokedEventFilter;

    "ReceivedKtrhs(uint256,uint256,uint128,uint32)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      amt?: null,
      receivableCycles?: null
    ): ReceivedKtrhsEventFilter;
    ReceivedKtrhs(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      amt?: null,
      receivableCycles?: null
    ): ReceivedKtrhsEventFilter;

    "Split(uint256,uint256,uint256,uint128)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      receiver?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      amt?: null
    ): SplitEventFilter;
    Split(
      userId?: PromiseOrValue<BigNumberish> | null,
      receiver?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      amt?: null
    ): SplitEventFilter;

    "SplitsReceiverSeen(bytes32,uint256,uint32)"(
      receiversHash?: PromiseOrValue<BytesLike> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      weight?: null
    ): SplitsReceiverSeenEventFilter;
    SplitsReceiverSeen(
      receiversHash?: PromiseOrValue<BytesLike> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      weight?: null
    ): SplitsReceiverSeenEventFilter;

    "SplitsSet(uint256,bytes32)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      receiversHash?: PromiseOrValue<BytesLike> | null
    ): SplitsSetEventFilter;
    SplitsSet(
      userId?: PromiseOrValue<BigNumberish> | null,
      receiversHash?: PromiseOrValue<BytesLike> | null
    ): SplitsSetEventFilter;

    "SqueezedKtrhs(uint256,uint256,uint256,uint128,bytes32[])"(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      senderId?: PromiseOrValue<BigNumberish> | null,
      amt?: null,
      ktrhsHistoryHashes?: null
    ): SqueezedKtrhsEventFilter;
    SqueezedKtrhs(
      userId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      senderId?: PromiseOrValue<BigNumberish> | null,
      amt?: null,
      ktrhsHistoryHashes?: null
    ): SqueezedKtrhsEventFilter;

    "Unpaused(address)"(
      pauser?: PromiseOrValue<string> | null
    ): UnpausedEventFilter;
    Unpaused(pauser?: PromiseOrValue<string> | null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "UserMetadataEmitted(uint256,bytes32,bytes)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      key?: PromiseOrValue<BytesLike> | null,
      value?: null
    ): UserMetadataEmittedEventFilter;
    UserMetadataEmitted(
      userId?: PromiseOrValue<BigNumberish> | null,
      key?: PromiseOrValue<BytesLike> | null,
      value?: null
    ): UserMetadataEmittedEventFilter;

    "Withdrawn(address,address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amt?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      erc20?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amt?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    AMT_PER_SEC_EXTRA_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    AMT_PER_SEC_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    DRIVER_ID_OFFSET(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_KTRHS_RECEIVERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SPLITS_RECEIVERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SPLITS_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allPausers(overrides?: CallOverrides): Promise<BigNumber>;

    balanceAt(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: KtrhsReceiverStruct[],
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectable(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycleSecs(overrides?: CallOverrides): Promise<BigNumber>;

    ktrhsState(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    driverAddress(
      driverId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emitUserMetadata(
      userId: PromiseOrValue<BigNumberish>,
      userMetadata: UserMetadataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    give(
      userId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantPauser(
      pauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hashKtrhs(
      receivers: KtrhsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashKtrhsHistory(
      oldKtrhsHistoryHash: PromiseOrValue<BytesLike>,
      ktrhsHash: PromiseOrValue<BytesLike>,
      updateTime: PromiseOrValue<BigNumberish>,
      maxEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashSplits(
      receivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isPauser(
      pauser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAmtPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    nextDriverId(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposedAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    receivableKtrhsCycles(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      maxCycles: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveKtrhsResult(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      maxCycles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDriver(
      driverAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePauser(
      pauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: KtrhsReceiverStruct[],
      balanceDelta: PromiseOrValue<BigNumberish>,
      newReceivers: KtrhsReceiverStruct[],
      maxEndHint1: PromiseOrValue<BigNumberish>,
      maxEndHint2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSplits(
      userId: PromiseOrValue<BigNumberish>,
      receivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    split(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitResult(
      userId: PromiseOrValue<BigNumberish>,
      currReceivers: SplitsReceiverStruct[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitsHash(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splittable(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    squeezeKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      senderId: PromiseOrValue<BigNumberish>,
      historyHash: PromiseOrValue<BytesLike>,
      ktrhsHistory: KtrhsHistoryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    squeezeKtrhsResult(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      senderId: PromiseOrValue<BigNumberish>,
      historyHash: PromiseOrValue<BytesLike>,
      ktrhsHistory: KtrhsHistoryStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBalance(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDriverAddress(
      driverId: PromiseOrValue<BigNumberish>,
      newDriverAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      erc20: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AMT_PER_SEC_EXTRA_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AMT_PER_SEC_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DRIVER_ID_OFFSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_KTRHS_RECEIVERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SPLITS_RECEIVERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_TOTAL_BALANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_SPLITS_WEIGHT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allPausers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceAt(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: KtrhsReceiverStruct[],
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collect(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectable(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycleSecs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ktrhsState(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    driverAddress(
      driverId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitUserMetadata(
      userId: PromiseOrValue<BigNumberish>,
      userMetadata: UserMetadataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    give(
      userId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantPauser(
      pauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hashKtrhs(
      receivers: KtrhsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashKtrhsHistory(
      oldKtrhsHistoryHash: PromiseOrValue<BytesLike>,
      ktrhsHash: PromiseOrValue<BytesLike>,
      updateTime: PromiseOrValue<BigNumberish>,
      maxEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashSplits(
      receivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPauser(
      pauser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAmtPerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextDriverId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposedAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivableKtrhsCycles(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      maxCycles: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveKtrhsResult(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      maxCycles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDriver(
      driverAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePauser(
      pauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: KtrhsReceiverStruct[],
      balanceDelta: PromiseOrValue<BigNumberish>,
      newReceivers: KtrhsReceiverStruct[],
      maxEndHint1: PromiseOrValue<BigNumberish>,
      maxEndHint2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSplits(
      userId: PromiseOrValue<BigNumberish>,
      receivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    split(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      currReceivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitResult(
      userId: PromiseOrValue<BigNumberish>,
      currReceivers: SplitsReceiverStruct[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splitsHash(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splittable(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    squeezeKtrhs(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      senderId: PromiseOrValue<BigNumberish>,
      historyHash: PromiseOrValue<BytesLike>,
      ktrhsHistory: KtrhsHistoryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    squeezeKtrhsResult(
      userId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      senderId: PromiseOrValue<BigNumberish>,
      historyHash: PromiseOrValue<BytesLike>,
      ktrhsHistory: KtrhsHistoryStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBalance(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDriverAddress(
      driverId: PromiseOrValue<BigNumberish>,
      newDriverAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      erc20: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
